// Generated by CoffeeScript 1.4.0
var fs, loadFiles, mime, path, soma, zlib;

fs = require('fs');

path = require('path');

zlib = require('zlib');

mime = require('../lib/node/lib/mime');

soma = require('soma');

exports.load = function() {
  var source, _i, _j, _len, _len1, _ref, _ref1;
  soma.files = {};
  soma.tree = {};
  soma.bundles = {};
  soma.scripts = ['ender.js'];
  loadFiles('ender.js', soma.tree, false);
  _ref = soma.config.api;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    source = _ref[_i];
    loadFiles(source, soma.tree, true);
  }
  _ref1 = soma.config.app;
  for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
    source = _ref1[_j];
    loadFiles(source, soma.tree, false);
  }
  if (fs.existsSync('bundles.json')) {
    return soma.bundles = JSON.parse(fs.readFileSync('bundles.json'));
  }
};

loadFiles = function(source, tree, api) {
  var abs, basename, data, encoding, url, watcher, _ref;
  basename = path.basename(source);
  if (!fs.existsSync(source)) {
    return;
  }
  if (fs.statSync(source).isDirectory()) {
    watcher = fs.watch(source, function() {
      var name, _i, _len, _ref, _results;
      if (!path.existsSync(source)) {
        console.log('Directory went missing: ', source);
        delete tree[basename];
        watcher.close();
        return;
      }
      tree[basename] = {};
      _ref = fs.readdirSync(source);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        name = _ref[_i];
        if (name[0] === '.') {
          continue;
        }
        _results.push(loadFiles(path.join(source, name), tree[basename], api));
      }
      return _results;
    });
    watcher.emit('change');
  } else {
    abs = path.join(process.cwd(), source);
    url = "/" + source;
    if (basename.slice(-3) === '.js') {
      if (api || basename === '_init.js') {
        soma._src = url;
        require(abs);
        soma._src = null;
      }
      if (!api && basename === '_init.js') {
        soma.scripts.push(url);
      }
    }
    if (!api) {
      if ((_ref = mime.lookup(source).slice(0, 4)) === 'text') {
        encoding = 'utf8';
      }
      data = fs.readFileSync(source, encoding);
      tree[basename] = url;
      soma.files[url] = data;
    }
  }
};
