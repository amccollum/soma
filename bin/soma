#!/usr/bin/env node
// Generated by CoffeeScript 1.3.3
var Bundle, Line, bundle, bundles, crypto, data, domain, fs, http, loadFiles, mapping, mime, path, soma, sources, url, _i, _len, _ref;

crypto = require('crypto');

domain = require('domain');

http = require('http');

fs = require('fs');

path = require('path');

mime = require('../lib/node/lib/mime');

soma = require('soma');

Line = require('line').Line;

loadFiles = function(source, api, tree, files, callback) {
  var abs, basename, encoding, url, watcher, _ref;
  if (tree == null) {
    tree = {};
  }
  if (files == null) {
    files = {};
  }
  basename = path.basename(source);
  if (fs.statSync(source).isDirectory()) {
    watcher = fs.watch(source, function() {
      var l;
      if (!path.existsSync(source)) {
        console.log('Directory went missing: ', source);
        delete tree[basename];
        watcher.close();
        return;
      }
      tree[basename] = {};
      return l = new Line({
        error: function(err) {
          throw err;
        }
      }, function() {
        return fs.readdir(source, line.wait());
      }, function(names) {
        var name, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = names.length; _i < _len; _i++) {
          name = names[_i];
          if (name[0] === '.') {
            continue;
          }
          _results.push(loadFiles("" + source + "/" + name, api, tree[basename], files = {}, line.wait()));
        }
        return _results;
      }, function() {
        return callback(tree);
      });
    });
    watcher.emit('change');
  } else {
    abs = "" + (process.cwd()) + "/" + source;
    url = "/" + source;
    if ((_ref = mime.lookup(source).slice(0, 4)) === 'text') {
      encoding = 'utf8';
    }
    if (name.slice(-3) === '.js') {
      if (api || name === '_init.js') {
        soma._src = url;
        require(abs);
        soma._src = null;
      }
      if (!api && name === '_init.js') {
        soma.scripts.push(url);
      }
    }
    if (!api) {
      fs.readFile(source, encoding, function(err, data) {
        if (err) {
          return callback.apply(this, arguments);
        }
        tree[basename] = url;
        files[url] = data;
        callback(null, tree);
      });
    }
  }
};

Bundle = (function() {

  function Bundle(sources) {
    this.files = {};
    this.hash = null;
    this.collect(sources, soma.tree);
  }

  Bundle.prototype.hash = function() {
    var data, sha, url, _ref;
    sha = crypto.createHash('sha1');
    _ref = this.files;
    for (url in _ref) {
      data = _ref[url];
      sha.update(url);
      sha.update(data);
    }
    this.hash = sha.digest('hex');
  };

  Bundle.prototype.collect = function(sources, tree) {
    var branch, part, parts, source, _i, _j, _len, _len1;
    for (_i = 0, _len = sources.length; _i < _len; _i++) {
      source = sources[_i];
      parts = source.split('/');
      branch = tree;
      for (_j = 0, _len1 = parts.length; _j < _len1; _j++) {
        part = parts[_j];
        if (!(part in branch)) {
          branch = null;
          break;
        }
        branch = branch[part];
      }
      if (typeof branch === 'object') {
        bundle(branch, branch, files);
      } else {
        this.files[branch] = soma.files[branch];
      }
    }
  };

  Bundle.prototype.write = function(dir, callback) {
    var data;
    data = "soma.bundles['" + this.hash + "'] = " + (JSON.stringify(this.files)) + ";";
    fs.writeFile("" + dir + "/" + this.hash + ".js", data, 'utf8', callback);
  };

  return Bundle;

})();

soma.load = function() {
  var _base, _base1;
  soma.files = {};
  soma.tree = {};
  soma.bundles = {};
  soma.scripts = ['ender.js'];
  soma.config = require('./package.json');
  (_base = soma.config).api || (_base.api = 'api');
  (_base1 = soma.config).app || (_base1.app = 'app');
  loadFiles(soma.config.api, true, soma.tree, soma.files);
  loadFiles(soma.config.app, false, soma.tree, soma.files);
  loadFiles('bundles', soma.tree, soma.files);
  return soma.bundled = require('./bundles');
};

soma.init = function() {
  var serverDomain;
  serverDomain = domain.create();
  return serverDomain.run(function() {
    var port, server;
    server = http.createServer(function(request, response) {
      var requestDomain;
      requestDomain = domain.create();
      requestDomain.add(request);
      requestDomain.add(response);
      requestDomain.on('error', function(err) {
        console.error('Error', request.url, (err != null ? err.stack : void 0) || err);
        try {
          response.statusCode = 500;
          response.end('Error occurred, sorry.');
          return response.on('close', function() {
            return requestDomain.dispose();
          });
        } catch (err) {
          console.error('Error sending 500', request.url, err);
          return requestDomain.dispose();
        }
      });
      return requestDomain.run(function() {
        var content, contentLength, contentType, context;
        if (request.url in soma.files) {
          contentType = mime.lookup(request.url);
          content = soma.files[request.url];
          if (content instanceof Buffer) {
            contentLength = content.length;
          } else {
            contentLength = Buffer.byteLength(content);
          }
          response.setHeader('Content-Type', contentType);
          response.setHeader('Content-Length', contentLength);
          return response.end(content);
        } else {
          context = new soma.Context(request, response, soma.scripts);
          return context.begin();
        }
      });
    });
    port = process.env.PORT || soma.config.port || 8000;
    server.listen(port);
    return console.log("Soma listening on port " + port + "...");
  });
};

if (process.argv[2] === 'bundle') {
  soma.load();
  bundles = {};
  mapping = {};
  _ref = soma.config.bundles;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    sources = _ref[_i];
    bundle = new Bundle(sources);
    bundle.write('bundles', function(err) {
      if (err) {
        throw err;
      }
    });
    bundles[bundle.hash] = bundle;
    for (url in bundles.files) {
      mapping[url] = bundle.hash;
    }
  }
  data = "module.exports = " + (JSON.stringify(mapping)) + ";";
  fs.writeFile("" + dir + "/index.js", data, 'utf8', function(err) {
    if (err) {
      throw err;
    }
  });
} else {
  soma.load();
  soma.init();
}
