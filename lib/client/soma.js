// Generated by CoffeeScript 1.3.1
(function() {
  var $, jar, origin, soma,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  jar = require('jar');

  soma = require('soma');

  soma.Chunk = (function(_super) {

    __extends(Chunk, _super);

    Chunk.name = 'Chunk';

    function Chunk() {
      return Chunk.__super__.constructor.apply(this, arguments);
    }

    Chunk.prototype.complete = function() {
      this.el || (this.el = $(this.html));
      return this.el.data('view', this);
    };

    Chunk.prototype.loadElement = function(tag, attributes, text, callback) {
      var done, el, url, urlAttr,
        _this = this;
      urlAttr = (tag === 'img' || tag === 'script' ? 'src' : 'href');
      url = attributes[urlAttr];
      if (url) {
        el = $("head [" + urlAttr + "=\"" + url + "\"], head [data-" + urlAttr + "=\"" + url + "\"]");
      }
      if (el.length) {
        if ('type' in attributes && attributes.type !== el.attr('type')) {
          el.detach().attr('type', attributes.type).appendTo($('head'));
        }
      } else {
        el = $(document.createElement(tag));
        if ('type' in attributes) {
          if (!url) {
            el.text(text);
          } else if (attributes.type === 'text/javascript') {
            el.attr('async', 'async');
          } else {
            el.attr("data-" + urlAttr, url);
            $.ajax({
              method: 'GET',
              url: "" + url + "?" + (Math.random()),
              type: 'html',
              success: function(text) {
                el.text(text);
                return el.trigger('load');
              },
              error: function(xhr, status, e, data) {
                return el.trigger('error');
              }
            });
          }
          $('head').append(el);
        }
        if (url && url.substr(0, 5) !== 'data:') {
          el.attr('data-loading', 'loading');
          el.bind('load error', function() {
            return el.attr('data-loading', null);
          });
        }
        el.attr(attributes);
      }
      if (el.attr('data-loading')) {
        done = this.wait(callback);
        el.bind('load', function() {
          return done(el);
        });
        el.bind('error', function() {
          _this.emit('error', 'loadElement', tag, attributes, text);
          return done(el);
        });
      } else if (callback) {
        callback(el);
      }
      return el;
    };

    Chunk.prototype.setTitle = function(title) {
      return $('title').text(title);
    };

    Chunk.prototype.setMeta = function(attributes, value) {
      var el, name;
      if (typeof attributes === 'string') {
        name = attributes;
        attributes = {
          name: name,
          value: value
        };
      }
      el = $("meta[name=\"" + attributes.name + "\"]");
      if (!el.length) {
        el = $(document.createElement('meta'));
        $('head').append(el);
      }
      el.attr(attributes);
      return el;
    };

    Chunk.prototype.loadScript = function(attributes, callback) {
      if (typeof attributes === 'string') {
        attributes = {
          src: attributes
        };
      }
      attributes.type = 'text/javascript';
      return this.loadElement('script', attributes, null, callback);
    };

    Chunk.prototype.loadStylesheet = function(attributes) {
      if (typeof attributes === 'string') {
        attributes = {
          href: attributes
        };
      }
      attributes.type = 'text/css';
      attributes.rel = 'stylesheet';
      return this.loadElement('link', attributes);
    };

    Chunk.prototype.loadTemplate = function(attributes) {
      var el;
      if (typeof attributes === 'string') {
        attributes = {
          src: attributes
        };
      }
      attributes.type = 'text/html';
      el = this.loadElement('script', attributes);
      el.toString = function() {
        return el.html();
      };
      return el;
    };

    Chunk.prototype.loadImage = function(attributes) {
      var el;
      if (typeof attributes === 'string') {
        attributes = {
          src: attributes
        };
      }
      el = this.loadElement('img', attributes);
      el.toString = function() {
        return el.outerHTML();
      };
      return el;
    };

    Chunk.prototype.loadData = function(options) {
      var done, result, _error, _success,
        _this = this;
      result = {};
      options.method || (options.method = 'GET');
      options.type = 'json';
      options.headers || (options.headers = {});
      if (options.data && typeof options.data !== 'string') {
        options.headers['Content-Type'] = 'application/json';
        options.data = JSON.stringify(options.data);
      }
      done = wait();
      _success = options.success;
      _error = options.error;
      options.success = function(data) {
        var key, _i, _len;
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          key = data[_i];
          result[key] = data[key];
        }
        if (_success) {
          _success(data);
        }
        return done();
      };
      options.error = function(xhr) {
        if (_error) {
          _error(xhr.status, xhr.response, options);
        } else {
          _this.emit('error', 'requireData', xhr.status, xhr.response, options);
        }
        return done();
      };
      $.ajax(options);
      return result;
    };

    return Chunk;

  })(soma.Chunk);

  soma.BrowserContext = (function(_super) {

    __extends(BrowserContext, _super);

    BrowserContext.name = 'BrowserContext';

    function BrowserContext(url, lazy) {
      this.url = url;
      this.lazy = lazy;
      this.jar = jar.jar;
    }

    BrowserContext.prototype.begin = function() {
      var result, results, _i, _len;
      results = soma.router.run(this.path, this);
      for (_i = 0, _len = results.length; _i < _len; _i++) {
        result = results[_i];
        if (result instanceof soma.Chunk) {
          this.chunk = result;
          while (this.chunk.parent) {
            this.chunk = new this.chunk.parent({
              child: this.chunk
            });
          }
          this.chunk.load(this);
          break;
        }
      }
      if (!this.lazy) {
        this.render();
      }
    };

    BrowserContext.prototype.render = function() {
      var _this = this;
      if (!this.chunk) {
        throw new Error('No chunk specified');
      } else {
        this.chunk.on('complete', function() {
          return $('body').html(_this.chunk.html);
        });
      }
    };

    BrowserContext.prototype.go = function(path, replace) {
      if (history.pushState) {
        if (replace) {
          history.replaceState({}, "", path);
        } else {
          history.pushState({}, "", path);
          window.onpopstate();
        }
      } else {
        document.location = path;
      }
    };

    return BrowserContext;

  })(soma.Context);

  soma = require('soma');

  $ = ender;

  $.ender({
    view: function(name, options) {
      return new soma.views[name](options);
    },
    enhance: function() {
      return $(document).enhance();
    }
  });

  $.ender({
    view: function(name, options) {
      if (options == null) {
        options = {};
      }
      return this.each(function() {
        options.el = this;
        return $.view(name, options);
      });
    },
    enhance: function() {
      var name, value, _ref;
      _ref = soma.views;
      for (name in _ref) {
        if (!__hasProp.call(_ref, name)) continue;
        value = _ref[name];
        $(value.prototype.selector, this).view(name);
      }
    },
    outerHTML: function(html) {
      if (html) {
        return this.each(function() {
          return $(this).replaceWith(html);
        });
      } else {
        return this[0].outerHTML || new XMLSerializer().serializeToString(this[0]);
      }
    }
  }, true);

  origin = document.location;

  soma.context = null;

  $('document').ready(function() {
    window.onpopstate = function() {
      if (document.location === origin) {
        origin = null;
        return;
      }
      soma.context = new soma.BrowserContext(document.location);
      soma.context.begin();
    };
    return $.enhance();
  });

}).call(this);
