// Generated by CoffeeScript 1.3.3
var $, soma,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

soma = require('soma');

$ = ender;

soma.config.engine = 'browser';

$.ender({
  enhance: function() {
    return $(document).enhance();
  },
  ajaj: function(options) {
    options.method || (options.method = 'GET');
    options.type = 'json';
    options.headers || (options.headers = {});
    options.headers['X-CSRF-Token'] = this.cookies.get('_csrf', {
      raw: true
    });
    options.headers['Content-Type'] = 'application/json';
    if (options.data && typeof options.data !== 'string') {
      options.data = JSON.stringify(options.data);
    }
    return $.ajax(options);
  }
});

$.ender({
  enhance: function() {
    $('a[data-precache != "true"]:local-link(0)', this).each(function() {
      var path;
      path = this.pathname;
      return $(this).bind('click', function(event) {
        history.pushState(true, '', path);
        soma.load(path);
        event.stop();
      });
    });
    return $('a[data-precache = "true"]:local-link(0)', this).each(function() {
      $(this).bind('click', soma.precache(this.pathname));
    });
  },
  outerHTML: function(html) {
    if (html) {
      return this.each(function() {
        return $(this).replaceWith(html);
      });
    } else {
      return this[0].outerHTML || new XMLSerializer().serializeToString(this[0]);
    }
  }
}, true);

$('document').ready(function() {
  var context;
  context = new soma.Context(document.location.pathname);
  context.views = soma._initialViews;
  conext.emit('render');
  if (history.pushState) {
    $('document').one('load', function() {
      return history.replaceState(true, '', document.location);
    });
    return window.onpopstate = function(event) {
      if (!event.state) {
        return;
      }
      return soma.load(document.location.pathname);
    };
  }
});

soma.precache = function(path) {
  var context;
  if (history.pushState) {
    context = soma.load(path, true);
    return function(event) {
      history.pushState({}, '', context.path);
      context.render();
      if (event) {
        event.stop();
      }
    };
  } else {
    return function(event) {
      if (this.pathname !== path) {
        document.location = path;
        if (event) {
          return event.stop();
        }
      }
    };
  }
};

soma.load = function(path, lazy) {
  var context;
  context = new soma.Context(path, lazy);
  context.begin();
  return context;
};

soma.Context = (function(_super) {

  __extends(Context, _super);

  function Context(path, lazy) {
    var _this = this;
    this.path = path;
    this.lazy = lazy;
    Context.__super__.constructor.apply(this, arguments);
    this.cookies = $.jar;
    this.child = null;
    this.built = false;
    this.rendered = false;
    this.stopped = false;
    this.on('render', function() {
      var context, url, _i, _len, _ref, _results;
      $.enhance();
      context = _this;
      _ref = _this.views;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        url = _ref[_i];
        _results.push(_this.loadCode(url, ['soma'], function(err, fn) {
          if (err) {
            throw err;
          }
          fn.apply(context, soma);
        }));
      }
      return _results;
    });
  }

  Context.prototype.begin = function() {
    this.results = soma.router.run(this.path, this);
    if (!this.lazy) {
      this.render();
    }
  };

  Context.prototype.send = function(chunk) {
    if (!(chunk instanceof soma.Chunk)) {
      throw new Error('Must send chunks on the client');
    } else if (this.chunk) {
      throw new Error('Cannot send multiple chunks');
    }
    this.chunk = chunk;
    while (this.chunk.meta) {
      this.chunk = this.chunk.meta();
    }
    this.chunk.load(this);
    if (!this.lazy) {
      this.render();
    }
  };

  Context.prototype.build = function(html) {
    this.html = html;
    this.built = true;
    this.emit('build', this.html);
  };

  Context.prototype.render = function() {
    var done,
      _this = this;
    if (this.child) {
      return this.child.render();
    }
    this.lazy = false;
    if (!this.results.length) {
      document.location = this.path;
      return;
    }
    done = function() {
      if (!_this.stopped) {
        $('body').unbind().html(_this.html);
        _this.rendered = true;
        return _this.emit('render');
      }
    };
    if (this.html) {
      done();
    } else {
      this.on('build', done);
    }
  };

  Context.prototype.go = function(path, replace) {
    if (history.pushState) {
      if (!this.lazy) {
        if (replace) {
          history.replaceState(true, '', path);
        } else {
          history.pushState(true, '', path);
        }
      }
      this.stopped = true;
      this.child = new soma.Context(path, this.lazy);
      this.child.begin();
    } else {
      document.location = path;
    }
  };

  Context.prototype.setTitle = function(title) {
    var _this = this;
    if (!this.rendered) {
      this.on('render', function() {
        return _this.setTitle(title);
      });
    } else {
      $('title').text(title);
    }
  };

  Context.prototype.setIcon = function(attributes) {
    var el,
      _this = this;
    if (!this.rendered) {
      this.on('render', function() {
        return _this.setIcon(attributes);
      });
    } else {
      if (typeof attributes === 'string') {
        attributes = {
          href: attributes
        };
      }
      attributes.rel || (attributes.rel = 'icon');
      attributes.type || (attributes.type = 'image/png');
      el = $("link[rel=\"" + attributes.rel + "\"][href=\"" + attributes.href + "\"]");
      if (!el.length) {
        el = $(document.createElement('link'));
        $('head').append(el);
      }
      el.attr(attributes);
    }
  };

  Context.prototype.setMeta = function(nameOrAttributes, value) {
    var attributes, el,
      _this = this;
    if (!this.rendered) {
      this.on('render', function() {
        return _this.setMeta(attributes, value);
      });
    } else {
      if (value) {
        attributes = {
          name: nameOrAttributes,
          value: value
        };
      } else {
        attributes = nameOrAttributes;
      }
      el = $("meta[name=\"" + attributes.name + "\"]");
      if (!el.length) {
        el = $(document.createElement('meta'));
        $('head').append(el);
      }
      el.attr(attributes);
    }
  };

  Context.prototype.loadElement = function(tag, attributes, text, callback) {
    var done, el, url, urlAttr,
      _this = this;
    urlAttr = (tag === 'img' || tag === 'script' ? 'src' : 'href');
    url = attributes[urlAttr];
    if (url) {
      el = $("head [" + urlAttr + "=\"" + url + "\"], head [data-" + urlAttr + "=\"" + url + "\"]");
    }
    if (el && el.length) {
      if ('type' in attributes && attributes.type !== el.attr('type')) {
        el.detach().attr('type', attributes.type).appendTo($('head'));
      }
    } else {
      el = $(document.createElement(tag));
      if ('type' in attributes) {
        if (!url) {
          el.text(text);
        } else if (attributes.type === 'text/javascript') {
          el.attr('defer', 'defer');
        } else {
          el.attr("data-" + urlAttr, url);
          delete attributes[urlAttr];
          $.ajax({
            method: 'GET',
            url: "" + url,
            type: 'html',
            success: function(text) {
              el.text(text);
              return el.trigger('load');
            },
            error: function(xhr) {
              return el.trigger('error');
            }
          });
        }
        $('head').append(el);
      }
      if (url && url.substr(0, 5) !== 'data:') {
        el.attr('data-loading', 'loading');
        el.bind('load error', function() {
          return el.removeAttr('data-loading');
        });
      }
      el.attr(attributes);
    }
    if (el.attr('data-loading')) {
      done = this.wait(callback);
      el.bind('load', function() {
        return done(el);
      });
      el.bind('error', function() {
        _this.emit('error', 'loadElement', tag, attributes, text);
        return done(el);
      });
    } else if (callback) {
      callback(el);
    }
    return el;
  };

  Context.prototype.loadFile = function(url, callback) {
    var attributes, sha;
    url = this.resolve(url);
    if (url in soma.bundled) {
      sha = soma.bundled[url];
      attributes = {
        src: "/bundles/" + sha + ".js",
        type: 'text/javascript'
      };
      this.loadElement('script', attributes, null, function(err) {
        if (err) {
          return callback.apply(this, arguments);
        }
        return callback(null, soma.bundles[sha][url]);
      });
    } else {
      attributes = {
        src: url,
        type: 'text/plain'
      };
      this.loadElement('script', attributes, null, function(err, el) {
        if (err) {
          return callback.apply(this, arguments);
        }
        return callback(null, el.text());
      });
    }
  };

  Context.prototype.loadScript = function(attributes, callback) {
    if (typeof attributes === 'string') {
      attributes = {
        src: attributes
      };
    }
    attributes.src = this.resolve(attributes.src);
    attributes.type = 'text/javascript';
    this.loadElement('script', attributes, null, callback);
  };

  Context.prototype.loadStylesheet = function(attributes, callback) {
    if (typeof attributes === 'string') {
      attributes = {
        href: attributes
      };
    }
    attributes.href = this.resolve(attributes.href);
    attributes.type = 'text/css';
    attributes.rel = 'stylesheet';
    this.loadElement('link', attributes, null, callback);
  };

  Context.prototype.loadImage = function(attributes, callback) {
    if (typeof attributes === 'string') {
      attributes = {
        src: attributes
      };
    }
    attributes.src = this.resolve(attributes.src);
    this.loadElement('img', attributes, null, callback);
    el.toString = function() {
      return el.outerHTML();
    };
  };

  Context.prototype.loadData = function(options, callback) {
    var _error, _success,
      _this = this;
    _success = options.success;
    _error = options.error;
    options.url = this.resolve(options.url);
    options.success = function(data) {
      if (_success) {
        _success(data);
      }
      return callback(null, data);
    };
    options.error = function(xhr) {
      if (_error) {
        _error(xhr.status, xhr.response, options);
      }
      return callback(xhr.status, xhr.response, options, xhr);
    };
    $.ajaj(options);
  };

  return Context;

})(soma.Context);
