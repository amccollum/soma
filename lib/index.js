// Generated by CoffeeScript 1.4.0
var events, soma, _function_cache,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

soma = exports;

events = require('events');

soma.bundled = {};

soma.config = {};

soma.Router = require('route').Router;

soma.router = new soma.Router;

soma.routes = function(layout, routes, prefix) {
  var block, expr;
  if (typeof layout === 'object') {
    prefix = routes;
    routes = layout;
    layout = null;
  }
  for (expr in routes) {
    block = routes[expr];
    expr = (prefix || '/') + expr;
    expr = expr.replace(/\/\//g, '/');
    if (typeof block === 'function') {
      soma.router.add(expr, block);
    } else if (typeof block === 'object') {
      some.routes(layout, block, expr + '/');
    } else if (typeof block === 'string') {
      (function(chunk) {
        return soma.router.add(expr, function(params) {
          var _this = this;
          this.params = params;
          if (layout) {
            return this.loadChunk(layout, {
              chunk: chunk
            }, function(err, html) {
              if (err) {
                throw err;
              }
              _this.build(html);
            });
          } else {
            return this.loadChunk(chunk, function(err, html) {
              if (err) {
                throw err;
              }
              _this.build(html);
            });
          }
        });
      })(block);
    }
  }
};

_function_cache = {};

soma.Context = (function(_super) {

  __extends(Context, _super);

  function Context() {
    this.views = [];
    this.url = '/';
  }

  Context.prototype.resolve = function(url) {
    var i, parts;
    if (url.charAt(0) === '/' || /^https?:/.test(url)) {
      return url;
    }
    if (~(i = this.url.lastIndexOf('/'))) {
      url = this.url.substr(0, i + 1) + url;
    }
    parts = url.substr(1).split('/');
    while (~(i = parts.indexOf('.'))) {
      parts.splice(i, 1);
    }
    while (~(i = parts.indexOf('..'))) {
      if (i) {
        parts.splice(i - 1, 2);
      } else {
        parts.shift();
      }
    }
    return '/' + parts.join('/');
  };

  Context.prototype.loadCode = function(url, params, callback) {
    var args, key;
    if (params == null) {
      params = [];
    }
    url = this.resolve(url);
    if (typeof params === 'function') {
      callback = params;
      args = [];
    }
    key = [url].concat(params).join(':');
    if (key in _function_cache) {
      callback(null, _function_cache[key]);
    } else {
      this.loadFile(url, function(err, js) {
        if (err) {
          return callback.apply(null, arguments);
        }
        js += "\n//@ sourceURL=" + url;
        callback(null, (_function_cache[key] = Function.apply(null, params.concat([js]))));
      });
    }
  };

  Context.prototype.loadChunk = function(url, data, callback) {
    var subcontext;
    url = this.resolve(url);
    if (typeof data === 'function') {
      callback = data;
      data = void 0;
    }
    subcontext = this.createSubcontext({
      url: url,
      data: data
    });
    this.loadCode(url, ['require', 'callback'], function(err, fn) {
      if (err) {
        if (callback) {
          return callback.apply(null, arguments);
        } else {
          throw err;
        }
      }
      fn.call(subcontext, require, callback);
    });
  };

  Context.prototype.loadView = function(url, data, async, callback) {
    url = this.resolve(url);
    if (typeof async === 'function') {
      callback = async;
      async = void 0;
    }
    if (typeof data === 'function') {
      callback = data;
      data = void 0;
    }
    this.views.push({
      url: url,
      data: data,
      async: async
    });
    return this.loadScript({
      src: url,
      type: 'text/plain'
    }, callback);
  };

  Context.prototype.createSubcontext = function(attributes) {
    var parent;
    parent = this;
    return new ((function() {

      _Class.prototype = parent;

      _Class.prototype.constructor = _Class;

      function _Class() {
        var name, value;
        for (name in attributes) {
          value = attributes[name];
          this[name] = value;
        }
        return;
      }

      return _Class;

    })());
  };

  return Context;

})(events.EventEmitter);

if (typeof process !== "undefined" && process !== null ? process.pid : void 0) {
  require('./node');
}
