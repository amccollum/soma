// Generated by CoffeeScript 1.3.3
(function() {
  var events, soma, _function_cache,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  soma = typeof exports !== "undefined" && exports !== null ? exports : (this['soma'] = {});

  events = require('events');

  soma.config = {};

  soma.Router = require('route').Router;

  soma.router = new soma.Router;

  soma.routes = function(layout, routes) {
    var expr, fn, _results;
    if (typeof layout !== 'string') {
      routes = layout;
      layout = null;
    }
    _results = [];
    for (expr in routes) {
      fn = routes[expr];
      _results.push(soma.router.add(expr, function(params) {
        var chunk, key, value, _ref;
        this.params = params;
        if (this.params) {
          _ref = this.params;
          for (key in _ref) {
            value = _ref[key];
            this.data[key] = value;
          }
        }
        if (typeof fn === 'function') {
          return fn.call(this, this.params);
        } else {
          chunk = fn;
          if (layout) {
            return this.loadChunk(layout, {
              chunk: chunk
            }, function(html) {
              return this.build(html);
            });
          } else {
            return this.loadChunk(chunk, function(html) {
              return this.build(html);
            });
          }
        }
      }));
    }
    return _results;
  };

  _function_cache = {};

  soma.Context = (function(_super) {
    var _dd;

    __extends(Context, _super);

    function Context() {
      this.modules = {};
      this.globals = {};
      this.views = [];
      this.url = '/';
    }

    _dd = {
      '/./': /\/\.\//g,
      '/.$': /\/\.$/,
      '^/../': /^\/\.\.\//,
      '/../': /(\/([^\/]*))?\/\.\.\//,
      '/..$': /(\/([^\/]*))?\/\.\.$/
    };

    Context.prototype.resolve = function(url) {
      if (/^https?:/.test(url)) {
        return url;
      } else if (url.charAt('/') !== '/') {
        url = this.url.replace(/\/[^\/]*$/, '') + url;
      }
      url = url.replace(this._dd['/./'], '/');
      url = url.replace(this._dd['/.$'], '/');
      while (this._dd['/../'].test(url)) {
        url = url.replace(this._dd['/../'], '/');
      }
      url = url.replace(this._dd['/..$'], '/');
      return url;
    };

    Context.prototype.loadCode = function(url, args, callback) {
      var key;
      if (args == null) {
        args = [];
      }
      url = this.resolve(url);
      if (typeof args === 'function') {
        callback = args;
        args = [];
      }
      key = [url].concat(args).join(',');
      if (key in _function_cache) {
        callback(null, _function_cache[key]);
      } else {
        this.loadFile(url, function(err, js) {
          if (err) {
            callback.apply(this, arguments);
          }
          callback(null, (_function_cache[key] = Function.apply(null, args.concat([js]))));
        });
      }
    };

    Context.prototype.loadChunk = function(url, data, callback) {
      var subcontext;
      url = this.resolve(url);
      if (typeof data === 'function') {
        callback = data;
        data = void 0;
      }
      subcontext = this.createSubcontext({
        build: function(html) {
          return callback(null, html);
        },
        url: url
      });
      this.loadCode(url, ['soma', 'data'], function(err, fn) {
        if (err) {
          callback.apply(this, arguments);
        }
        fn.apply(subcontext, soma, data);
      });
    };

    Context.prototype.loadView = function(url, callback) {
      this.views.append(url);
      return this.loadScript({
        src: url,
        type: 'text/plain'
      }, callback);
    };

    Context.prototype.loadModule = function(url, force, callback) {
      var _this = this;
      url = this.resolve(url);
      if (typeof force === 'function') {
        callback = force;
        force = void 0;
      }
      if (url in this.modules) {
        callback(null, this.modules[url].exports);
      }
      return this.loadCode(url, ['module', 'exports', 'soma'], function(err, fn) {
        var module;
        if (err) {
          callback.apply(_this, arguments);
        }
        _this.modules[url] = module = {
          exports: {}
        };
        fn.apply(_this.globals, module, module.exports, soma);
        return callback(null, module.exports);
      });
    };

    Context.prototype.createSubcontext = function(attributes) {
      var parent;
      parent = this;
      return new ((function() {

        _Class.prototype = parent;

        _Class.prototype.constructor = _Class;

        function _Class() {
          var name, value;
          for (name in attributes) {
            value = attributes[name];
            this[name] = value;
          }
          return;
        }

        return _Class;

      })());
    };

    return Context;

  })(events.EventEmitter);

  if (typeof process !== "undefined" && process !== null ? process.pid : void 0) {
    require('./node');
  }

}).call(this);
