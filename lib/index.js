// Generated by CoffeeScript 1.3.1
(function() {
  var collect, decamelize, events, extend, soma,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  soma = typeof exports !== "undefined" && exports !== null ? exports : (this['soma'] = {});

  events = require('events');

  soma.Router = require('route').Router;

  soma.router = new soma.Router;

  soma.routes = function(ob) {
    return soma.router.add(ob);
  };

  collect = function(cls, fn, ob) {
    var arr, item, name, _i, _len;
    if (Array.isArray(ob)) {
      arr = ob;
      ob = {};
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        item = arr[_i];
        ob[item.name] = item;
      }
    }
    for (name in ob) {
      item = ob[name];
      if (typeof item === 'object') {
        item = (function(_super) {
          var key, value;

          __extends(_Class, _super);

          function _Class() {
            return _Class.__super__.constructor.apply(this, arguments);
          }

          for (key in item) {
            value = item[key];
            _Class.prototype[key] = value;
          }

          return _Class;

        })(cls);
      }
      item.prototype._src = soma._src;
      item.name || (item.name = name);
      fn[name] = item;
    }
  };

  soma.chunks = function(ob) {
    return collect(soma.Chunk, soma.chunks, ob);
  };

  soma.views = function(ob) {
    return collect(soma.View, soma.views, ob);
  };

  extend = function(ob1, ob2) {
    var key, value, _results;
    _results = [];
    for (key in ob2) {
      value = ob2[key];
      _results.push(ob1[key] = value);
    }
    return _results;
  };

  decamelize = function(s) {
    return s && s.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
  };

  soma.EventMonitor = (function(_super) {

    __extends(EventMonitor, _super);

    EventMonitor.name = 'EventMonitor';

    EventMonitor.prototype.events = [];

    function EventMonitor() {
      var event, _i, _len, _ref;
      _ref = this.events;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        event = _ref[_i];
        if (event in this) {
          this.on(event, this[event]);
        }
      }
    }

    return EventMonitor;

  })(events.EventEmitter);

  soma.Widget = (function(_super) {

    __extends(Widget, _super);

    Widget.name = 'Widget';

    Widget.prototype.defaults = {};

    function Widget(options) {
      this.options = {};
      extend(this.options, this.defaults);
      extend(this.options, options);
      Widget.__super__.constructor.call(this, this.options);
      this.status = null;
    }

    Widget.prototype.emit = function(event) {
      if (__indexOf.call(this.events, event) >= 0) {
        this.status = event;
      }
      return Widget.__super__.emit.apply(this, arguments);
    };

    return Widget;

  })(soma.EventMonitor);

  soma.Context = (function() {

    Context.name = 'Context';

    function Context() {}

    return Context;

  })();

  soma.View = (function(_super) {

    __extends(View, _super);

    View.name = 'View';

    View.prototype.events = ['create', 'destroy'];

    function View() {
      var _this = this;
      View.__super__.constructor.apply(this, arguments);
      this.context = this.options.context;
      this.cookies = this.context.cookies;
      this.go = function() {
        return _this.context.go.apply(_this.context, arguments);
      };
      this.name = decamelize(this.constructor.name);
      this.el = $(this.options.el);
      this.el.data(this.name, this);
      this.el.one('remove', function(event) {
        if (event.target === _this.el[0]) {
          _this.el.data(_this.name, null);
          return _this.emit('destroy');
        }
      });
      this.emit('create');
    }

    View.prototype.$ = function(selector) {
      return $(selector, this.el);
    };

    return View;

  })(soma.Widget);

  soma.Chunk = (function(_super) {

    __extends(Chunk, _super);

    Chunk.name = 'Chunk';

    Chunk.prototype.events = ['prepare', 'loading', 'ready', 'error', 'build', 'complete', 'render', 'halt'];

    function Chunk() {
      Chunk.__super__.constructor.apply(this, arguments);
      this.errors = [];
      this.waiting = 0;
    }

    Chunk.prototype.emit = function(event) {
      var _i, _len, _ref, _results;
      if (this.status !== 'halt') {
        Chunk.__super__.emit.apply(this, arguments);
      }
      if (event === 'halt') {
        _ref = this.events;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          event = _ref[_i];
          _results.push(this.removeAllListeners(event));
        }
        return _results;
      }
    };

    Chunk.prototype.load = function(context) {
      var _this = this;
      this.context = context;
      this.cookies = this.context.cookies;
      this.go = function() {
        return _this.context.go.apply(_this.context, arguments);
      };
      if (!this.status) {
        setTimeout(this.wait(), 1);
        return this.emit('prepare', this.options);
      }
    };

    Chunk.prototype.toString = function() {
      return this.html;
    };

    Chunk.prototype.error = function() {
      var args;
      args = Array.prototype.slice.call(arguments);
      return this.errors.push(args);
    };

    Chunk.prototype.ready = function() {
      if (!this.html) {
        this.emit('build', this.errors);
        return this.emit('complete');
      }
    };

    Chunk.prototype.wait = function(fn) {
      var _this = this;
      if (!this.waiting++) {
        this.emit('loading');
      }
      return function() {
        if (fn) {
          fn.apply(_this, arguments);
        }
        if (!--_this.waiting && _this.status !== 'abort') {
          return _this.emit('ready');
        }
      };
    };

    Chunk.prototype.loadChunk = function(chunk, options) {
      if (typeof chunk === 'function') {
        chunk = new chunk(options);
      } else if (typeof chunk === 'string') {
        chunk = new soma.chunks[chunk](options);
      }
      if (!chunk.html) {
        chunk.on('complete', this.wait());
        chunk.load(this.context);
      }
      return chunk;
    };

    return Chunk;

  })(soma.Widget);

  if (typeof process !== "undefined" && process !== null ? process.pid : void 0) {
    require('./node');
  }

}).call(this);
