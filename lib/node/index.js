// Generated by CoffeeScript 1.3.1
var Element, combineChunks, escapeXML, jar, querystring, soma, upload, url,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

jar = require('jar');

querystring = require('querystring');

url = require('url');

upload = require('./lib/upload');

soma = require('..');

escapeXML = function(s) {
  return s.toString().replace(/&(?!\w+;)|["<>]/g, function(s) {
    switch (s) {
      case '&':
        return '&amp;';
      case '"':
        return '&#34;';
      case '<':
        return '&lt;';
      case '>':
        return '&gt;';
      default:
        return s;
    }
  });
};

combineChunks = function(chunks) {
  var chunk, result, size, _i, _j, _len, _len1;
  size = 0;
  for (_i = 0, _len = chunks.length; _i < _len; _i++) {
    chunk = chunks[_i];
    size += chunk.length;
  }
  result = new Buffer(size);
  size = 0;
  for (_j = 0, _len1 = chunks.length; _j < _len1; _j++) {
    chunk = chunks[_j];
    chunk.copy(result, size, 0);
    size += chunk.length;
  }
  return result;
};

Element = (function() {

  Element.name = 'Element';

  Element.prototype.isVoid = function() {
    return this.tag in {
      area: true,
      base: true,
      br: true,
      col: true,
      hr: true,
      img: true,
      input: true,
      link: true,
      meta: true,
      param: true,
      command: true,
      keygen: true,
      source: true
    };
  };

  function Element(tag, attributes, text) {
    this.tag = tag;
    this.attributes = attributes != null ? attributes : {};
    this.text = text != null ? text : '';
  }

  Element.prototype.headerKey = function() {
    switch (this.tag) {
      case 'meta':
        if ('charset' in this.attributes) {
          return 'meta-charset';
        } else if ('name' in this.attributes) {
          return "meta-name-" + this.attributes.name;
        } else if ('http-equiv' in this.attributes) {
          return "meta-http-" + this.attributes['http-equiv'];
        }
        break;
      case 'title':
        return 'title';
      case 'link':
        return "link-" + this.attributes.rel + "-" + this.attributes.href;
      case 'script':
        return "script-" + this.attributes.src;
      case 'style':
        return "style-" + this.attributes['data-href'];
    }
  };

  Element.prototype.toString = function() {
    var html, name, value, _ref;
    html = "<" + this.tag;
    _ref = this.attributes;
    for (name in _ref) {
      value = _ref[name];
      html += " " + name + "=\"" + (escapeXML(value)) + "\"";
    }
    html += !this.text && this.isVoid() ? ' />' : ">" + this.text + "</" + this.tag + ">";
    return html;
  };

  return Element;

})();

soma.Chunk = (function(_super) {

  __extends(Chunk, _super);

  Chunk.name = 'Chunk';

  function Chunk() {
    return Chunk.__super__.constructor.apply(this, arguments);
  }

  Chunk.prototype.load = function() {
    Chunk.__super__.load.apply(this, arguments);
    if (this._src) {
      return this.loadScript(this._src);
    }
  };

  Chunk.prototype.loadElement = function(tag, attributes, text, callback) {
    var el;
    el = new Element(tag, attributes, text);
    this.context.addHeadElement(el);
    if (callback) {
      callback();
    }
    return el;
  };

  Chunk.prototype.setTitle = function(title) {
    return this.loadElement('title', {}, title);
  };

  Chunk.prototype.setMetaHeader = function(attributes, content) {
    if (typeof attributes === 'string') {
      attributes = {
        'http-equiv': attributes,
        content: content
      };
    }
    return this.loadElement('meta', attributes);
  };

  Chunk.prototype.setMeta = function(attributes, content) {
    if (typeof attributes === 'string') {
      attributes = {
        name: attributes,
        content: content
      };
    }
    return this.loadElement('meta', attributes);
  };

  Chunk.prototype.setManifest = function(src) {
    return this.context.addManifest(src);
  };

  Chunk.prototype.loadScript = function(attributes, callback) {
    var text;
    if (typeof attributes === 'string') {
      attributes = {
        src: attributes
      };
    }
    attributes.type = 'text/javascript';
    attributes.charset = 'utf8';
    if (this.context.inlineScripts) {
      text = soma.files[attributes.src];
      attributes['data-src'] = attributes.src;
      delete attributes.src;
    } else {
      attributes['data-loading'] = 'loading';
      attributes['onload'] = "this.removeAttribute('data-loading');";
    }
    return this.loadElement('script', attributes, text, callback);
  };

  Chunk.prototype.loadStylesheet = function(attributes) {
    var tag, text;
    if (typeof attributes === 'string') {
      attributes = {
        href: attributes
      };
    }
    if (this.context.inlineStylesheets) {
      tag = 'style';
      text = soma.files[attributes.href];
      attributes['data-href'] = attributes.href;
      delete attributes.href;
    } else {
      attributes.rel = 'stylesheet';
    }
    attributes.type = 'text/css';
    attributes.charset = 'utf8';
    return this.loadElement('link', attributes, text);
  };

  Chunk.prototype.loadTemplate = function(attributes) {
    var text;
    if (typeof attributes === 'string') {
      attributes = {
        src: attributes
      };
    }
    text = soma.files[attributes.src];
    attributes['data-src'] = attributes.src;
    delete attributes.src;
    attributes.type = 'text/plain';
    attributes.charset = 'utf8';
    this.loadElement('script', attributes, text);
    return text;
  };

  Chunk.prototype.loadImage = function(attributes) {
    if (typeof attributes === 'string') {
      attributes = {
        src: attributes
      };
    }
    attributes['data-loading'] = 'loading';
    attributes['onload'] = "this.removeAttribute('data-loading');";
    return this.loadElement('img', attributes);
  };

  Chunk.prototype.loadData = function(options) {
    var context, done, result, _error, _success,
      _this = this;
    result = {};
    _success = options.success;
    _error = options.error;
    done = this.wait();
    options.success = function(data) {
      var key, _i, _len;
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        key = data[_i];
        result[key] = data[key];
      }
      if (_success) {
        _success(data);
      }
      return done();
    };
    options.error = function(status, response) {
      if (_error) {
        _error(status, response, options);
      } else {
        _this.emit('error', 'requireData', status, response, options);
      }
      return done();
    };
    context = new soma.InternalContext(this.context, options);
    context.begin();
    return result;
  };

  return Chunk;

})(soma.Chunk);

soma.ClientContext = (function(_super) {

  __extends(ClientContext, _super);

  ClientContext.name = 'ClientContext';

  ClientContext.prototype.inlineScripts = false;

  ClientContext.prototype.inlineStylesheets = false;

  function ClientContext(request, response, scripts) {
    var attributes, key, script, urlParsed, _i, _len;
    this.request = request;
    this.response = response;
    urlParsed = url.parse(this.request.url, true);
    for (key in urlParsed) {
      this[key] = urlParsed[key];
    }
    this.cookies = new jar.Jar(this.request, this.response, ['$ecret']);
    this.head = {};
    this.addHeadElement(new Element('title'));
    this.addHeadElement(new Element('meta', {
      charset: 'utf-8'
    }));
    for (_i = 0, _len = scripts.length; _i < _len; _i++) {
      script = scripts[_i];
      attributes = {
        src: script,
        type: 'text/javascript',
        charset: 'utf8',
        onload: "this.removeAttribute('data-loading');",
        'data-loading': 'loading'
      };
      this.addHeadElement(new Element('script', attributes));
    }
  }

  ClientContext.prototype.addHeadElement = function(el) {
    if (el.headerKey()) {
      this.head[el.headerKey()] = el;
    }
  };

  ClientContext.prototype.addManifest = function(src) {
    return this.manifest = "manifest=" + src;
  };

  ClientContext.prototype.begin = function() {
    var contentType;
    contentType = this.request.headers['content-type'];
    if (contentType) {
      contentType = contentType.split(/;/)[0];
    }
    switch (contentType) {
      case void 0:
      case 'application/x-www-form-urlencoded':
        this._readUrlEncoded();
        break;
      case 'application/json':
        this._readJSON();
        break;
      case 'application/octet-stream':
      case 'multipart/form-data':
        this._readFiles();
    }
  };

  ClientContext.prototype.route = function(data) {
    var result, results, _i, _len;
    this.data = data;
    results = soma.router.run(this.path, this);
    if (!results.length) {
      this.send(404);
    } else {
      for (_i = 0, _len = results.length; _i < _len; _i++) {
        result = results[_i];
        if (result instanceof soma.Chunk) {
          this.send(result);
        }
      }
    }
  };

  ClientContext.prototype.send = function(statusCode, body, contentType) {
    var chunk, contentLength,
      _this = this;
    if (typeof statusCode !== 'number') {
      contentType = body;
      body = statusCode;
      statusCode = 200;
    }
    body || (body = '');
    if (body instanceof soma.Chunk) {
      chunk = body;
      while (chunk.meta) {
        chunk = chunk.meta();
      }
      chunk.on('complete', function() {
        var key, value;
        chunk.emit('render');
        return _this.send("<!doctype html>\n<html " + (_this.manifest || '') + ">\n<head>\n    " + (((function() {
          var _ref, _results;
          _ref = this.head;
          _results = [];
          for (key in _ref) {
            value = _ref[key];
            _results.push(value);
          }
          return _results;
        }).call(_this)).join('\n    ')) + "\n</head>\n<body>\n    " + chunk.html + "\n</body>\n</html>");
      });
      chunk.load(this);
      return;
    }
    if (body instanceof Buffer) {
      contentType || (contentType = 'application/octet-stream');
      contentLength = body.length;
    } else {
      if (typeof body === 'object') {
        body = JSON.stringify(body);
        contentType || (contentType = 'application/json');
      } else {
        contentType || (contentType = 'text/html');
      }
      contentLength = Buffer.byteLength(body);
    }
    this.response.statusCode = statusCode;
    this.response.setHeader('Content-Type', contentType);
    this.response.setHeader('Content-Length', contentLength);
    this.cookies.setHeaders();
    this.response.end(body);
  };

  ClientContext.prototype.sendError = function(err, body) {
    if (err) {
      console.log(err.stack);
    }
    return this.send(500, body);
  };

  ClientContext.prototype.go = function(path) {
    this.response.statusCode = 303;
    this.response.setHeader('Location', path);
    this.cookies.setHeaders();
    this.response.end();
    return false;
  };

  ClientContext.prototype._readJSON = function() {
    var chunks,
      _this = this;
    chunks = [];
    this.request.on('data', function(chunk) {
      return chunks.push(chunk);
    });
    this.request.on('end', function() {
      return _this.route(JSON.parse(chunks.join("")));
    });
  };

  ClientContext.prototype._readUrlEncoded = function() {
    var chunks,
      _this = this;
    chunks = [];
    this.request.on('data', function(chunk) {
      return chunks.push(chunk);
    });
    this.request.on('end', function() {
      return _this.route(querystring.parse(chunks.join("")));
    });
  };

  ClientContext.prototype._readFiles = function() {
    var uploadRequest,
      _this = this;
    uploadRequest = new upload.UploadRequest(this.request);
    uploadRequest.once('file', function(file) {
      var chunks;
      chunks = [];
      file.on('data', function(chunk) {
        return chunks.push(chunk);
      });
      return file.on('end', function() {
        return _this.route(combineChunks(chunks));
      });
    });
    uploadRequest.begin();
  };

  return ClientContext;

})(soma.Context);

soma.InternalContext = (function(_super) {

  __extends(InternalContext, _super);

  InternalContext.name = 'InternalContext';

  function InternalContext(parent, options) {
    this.parent = parent;
    this.options = options;
    this.cookies = this.parent.cookies;
  }

  InternalContext.prototype.begin = function() {
    return soma.router.run(this.options.url, this);
  };

  InternalContext.prototype.send = function(statusCode, body) {
    if (typeof statusCode !== 'number') {
      body = statusCode;
      statusCode = 200;
    }
    if (statusCode !== 200) {
      return this.options.error(statusCode, body);
    }
    if (typeof body !== 'object') {
      throw new Error('Internal contexts can only send JSON.');
    }
    return this.options.success(body);
  };

  InternalContext.prototype.sendError = function(err, body) {
    if (err) {
      console.log(err.stack);
    }
    return this.send(500, body);
  };

  InternalContext.prototype.go = function(path) {
    return this.parent.go(path);
  };

  return InternalContext;

})(soma.Context);
