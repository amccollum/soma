// Generated by CoffeeScript 1.4.0
var Element, combineChunks, crypto, escapeXML, jar, multipart, querystring, soma, url,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

crypto = require('crypto');

jar = require('jar');

querystring = require('querystring');

url = require('url');

multipart = require('./lib/multipart');

soma = require('..');

soma.config.engine = 'node';

escapeXML = function(s) {
  return s.toString().replace(/&(?!\w+;)|["<>]/g, function(s) {
    switch (s) {
      case '&':
        return '&amp;';
      case '"':
        return '&#34;';
      case '<':
        return '&lt;';
      case '>':
        return '&gt;';
      default:
        return s;
    }
  });
};

combineChunks = function(chunks) {
  var chunk, result, size, _i, _j, _len, _len1;
  size = 0;
  for (_i = 0, _len = chunks.length; _i < _len; _i++) {
    chunk = chunks[_i];
    size += chunk.length;
  }
  result = new Buffer(size);
  size = 0;
  for (_j = 0, _len1 = chunks.length; _j < _len1; _j++) {
    chunk = chunks[_j];
    chunk.copy(result, size, 0);
    size += chunk.length;
  }
  return result;
};

Element = (function() {

  Element.prototype.isVoid = function() {
    return this.tag in {
      area: true,
      base: true,
      br: true,
      col: true,
      hr: true,
      img: true,
      input: true,
      link: true,
      meta: true,
      param: true,
      command: true,
      keygen: true,
      source: true
    };
  };

  function Element(tag, attributes, text) {
    this.tag = tag;
    this.attributes = attributes != null ? attributes : {};
    this.text = text != null ? text : '';
  }

  Element.prototype.headerKey = function() {
    switch (this.tag) {
      case 'meta':
        if ('charset' in this.attributes) {
          return 'meta-charset';
        } else if ('name' in this.attributes) {
          return "meta-name-" + this.attributes.name;
        } else if ('http-equiv' in this.attributes) {
          return "meta-http-" + this.attributes['http-equiv'];
        }
        break;
      case 'title':
        return 'title';
      case 'link':
        return "link-" + this.attributes.rel + "-" + this.attributes.href;
      case 'script':
        if (this.attributes.src) {
          return "script-" + this.attributes.src;
        } else {
          return "script-" + this.text;
        }
        break;
      case 'style':
        return "style-" + this.attributes['data-href'];
    }
  };

  Element.prototype.html = function() {
    return this.text;
  };

  Element.prototype.outerHTML = function() {
    var html, name, value, _ref;
    html = "<" + this.tag;
    _ref = this.attributes;
    for (name in _ref) {
      value = _ref[name];
      html += " " + name + "=\"" + (escapeXML(value)) + "\"";
    }
    html += !this.text && this.isVoid() ? ' />' : ">" + this.text + "</" + this.tag + ">";
    return html;
  };

  Element.prototype.toString = Element.prototype.outerHTML;

  return Element;

})();

soma.Context = (function(_super) {

  __extends(Context, _super);

  function Context(request, response, scripts) {
    var key, script, urlParsed, _i, _len;
    this.request = request;
    this.response = response;
    Context.__super__.constructor.apply(this, arguments);
    urlParsed = url.parse(this.request.url, true);
    for (key in urlParsed) {
      this[key] = urlParsed[key];
    }
    this.cookies = new jar.Jar(this.request, this.response, ['$ecret']);
    this.head = {};
    this.addHeadElement(new Element('title'));
    this.addHeadElement(new Element('meta', {
      charset: 'utf-8'
    }));
    for (_i = 0, _len = scripts.length; _i < _len; _i++) {
      script = scripts[_i];
      this.loadScript(script);
    }
  }

  Context.prototype.addHeadElement = function(el) {
    if (el.headerKey()) {
      this.head[el.headerKey()] = el;
    }
  };

  Context.prototype.addManifest = function(src) {
    return this.manifest = "manifest=" + src;
  };

  Context.prototype.begin = function() {
    var contentType;
    contentType = this.request.headers['content-type'];
    if (contentType) {
      contentType = contentType.split(/;/)[0];
    }
    switch (contentType) {
      case void 0:
        this.route();
        break;
      case 'application/x-www-form-urlencoded':
        this._readUrlEncoded();
        break;
      case 'application/json':
        this._readJSON();
        break;
      case 'application/octet-stream':
        this._readBinary();
        break;
      case 'multipart/form-data':
        this._readFormData();
    }
  };

  Context.prototype.route = function() {
    var results;
    if (!this._checkCSRF()) {
      return this.sendError(null, 'Bad/missing CSRF token');
    }
    results = soma.router.run(this.pathname, this);
    if (!results.length) {
      this.send(404);
    }
  };

  Context.prototype.build = function(body) {
    var html, key, value,
      _this = this;
    this.emit('build', body);
    html = "<!doctype html>\n<html " + (this.manifest || '') + ">\n<head>\n    " + (((function() {
      var _ref, _results;
      _ref = this.head;
      _results = [];
      for (key in _ref) {
        value = _ref[key];
        _results.push(value);
      }
      return _results;
    }).call(this)).join('\n    ')) + "\n    \n    <script type=\"text/javascript\">\n        soma._initialViews = " + (JSON.stringify(this.views)) + ";\n        soma.bundled = " + (JSON.stringify(soma.bundled)) + ";\n    </script>\n</head>\n<body>\n    " + body + "\n</body>\n</html>";
    if (this.cookies.get('_csrf', {
      raw: true
    })) {
      this.send(html);
    } else {
      crypto.randomBytes(32, function(err, buf) {
        if (err) {
          throw err;
        }
        _this.cookies.set('_csrf', buf.toString('hex'), {
          raw: true
        });
        return _this.send(html);
      });
    }
  };

  Context.prototype.send = function(statusCode, body, contentType) {
    var contentLength;
    if (typeof statusCode !== 'number') {
      contentType = body;
      body = statusCode;
      statusCode = 200;
    }
    body || (body = '');
    if (body instanceof Buffer) {
      contentType || (contentType = 'application/octet-stream');
      contentLength = body.length;
    } else {
      if (typeof body === 'string') {
        contentType || (contentType = 'text/html');
      } else {
        body = JSON.stringify(body);
        contentType || (contentType = 'application/json');
      }
      contentLength = Buffer.byteLength(body);
    }
    this.response.statusCode = statusCode;
    this.response.setHeader('Content-Type', contentType);
    this.response.setHeader('Content-Length', contentLength);
    this.cookies.setHeaders();
    this.response.end(body);
  };

  Context.prototype.sendError = function(err, body) {
    if (err) {
      console.log(err.stack);
    }
    return this.send(500, body);
  };

  Context.prototype.go = function(path) {
    var chunk, _i, _len, _ref;
    if (this.chunks) {
      _ref = this.chunks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        chunk = _ref[_i];
        chunk.emit('halt');
      }
      this.chunks = null;
    }
    this.response.statusCode = 303;
    this.response.setHeader('Location', path);
    this.cookies.setHeaders();
    this.response.end();
    return false;
  };

  Context.prototype._checkCSRF = function() {
    var token;
    token = this.cookies.get('_csrf', {
      raw: true
    });
    if (this.request.method === 'GET') {
      return true;
    } else if (this.body !== null && this.body._csrf === token) {
      delete this.body._csrf;
      return true;
    } else if (this.request.headers['x-csrf-token'] === token) {
      return true;
    } else {
      return false;
    }
  };

  Context.prototype._readJSON = function() {
    var chunks,
      _this = this;
    chunks = [];
    this.request.on('data', function(chunk) {
      return chunks.push(chunk);
    });
    this.request.on('end', function() {
      _this.body = JSON.parse(chunks.join('') || 'null');
      return _this.route();
    });
  };

  Context.prototype._readBinary = function() {
    var chunks,
      _this = this;
    chunks = [];
    this.body = {};
    if (soma.config.streamBinary) {
      this.body['stream'] = this.request;
      this.body['length'] = this.request.headers['content-length'];
      this.body['filename'] = this.request.headers['x-file-name'];
      return this.route(data);
    } else {
      this.request.on('data', function(chunk) {
        return chunks.push(chunk);
      });
      return this.request.on('end', function() {
        _this.body[_this.request.headers['x-file-name']] = combineChunks(chunks);
        return _this.route(data);
      });
    }
  };

  Context.prototype._readUrlEncoded = function() {
    var chunks,
      _this = this;
    chunks = [];
    this.request.on('data', function(chunk) {
      return chunks.push(chunk);
    });
    this.request.on('end', function() {
      _this.body = querystring.parse(chunks.join(''));
      return _this.route();
    });
  };

  Context.prototype._readFormData = function() {
    var chunks, formData,
      _this = this;
    chunks = [];
    this.body = {};
    formData = new multipart.formData(this.request);
    formData.on('stream', function(stream) {
      chunks = [];
      stream.on('data', function(chunk) {
        return chunks.push(chunk);
      });
      return stream.on('end', function() {
        return _this.body[stream.name] = combineChunks(chunks);
      });
    });
    formData.on('end', function() {
      delete _this.body._csrf;
      return _this.route(data);
    });
    formData.begin();
  };

  Context.prototype.setTitle = function(title) {
    return this.loadElement('title', {}, title);
  };

  Context.prototype.setIcon = function(attributes) {
    if (typeof attributes === 'string') {
      attributes = {
        href: attributes
      };
    }
    attributes.rel || (attributes.rel = 'icon');
    attributes.type || (attributes.type = 'image/png');
    return this.loadElement('link', attributes);
  };

  Context.prototype.setMetaHeader = function(attributes, content) {
    if (typeof attributes === 'string') {
      attributes = {
        'http-equiv': attributes,
        content: content
      };
    }
    return this.loadElement('meta', attributes);
  };

  Context.prototype.setMeta = function(attributes, content) {
    if (typeof attributes === 'string') {
      attributes = {
        name: attributes,
        content: content
      };
    }
    return this.loadElement('meta', attributes);
  };

  Context.prototype.setManifest = function(src) {
    return this.addManifest(src);
  };

  Context.prototype.loadElement = function(tag, attributes, text, callback) {
    var el;
    el = new Element(tag, attributes, text);
    this.addHeadElement(el);
    if (callback) {
      callback(null, el);
    }
    return el;
  };

  Context.prototype.loadFile = function(url, callback) {
    url = this.resolve(url);
    if (url in soma.files) {
      callback(null, soma.files[url]);
    } else {
      callback(new Error("File '" + url + "' could not be found"));
    }
  };

  Context.prototype.loadScript = function(attributes, text, callback) {
    if (typeof text === 'function') {
      callback = text;
      text = null;
    }
    if (typeof attributes === 'string') {
      attributes = {
        src: attributes
      };
    }
    attributes.type || (attributes.type = 'text/javascript');
    attributes.charset || (attributes.charset = 'utf8');
    if (attributes.src) {
      attributes.src = this.resolve(attributes.src);
      if (soma.config.inlineScripts && attributes.src in soma.files || attributes['type'] !== 'text/javascript') {
        text = soma.files[attributes.src];
        attributes['data-src'] = attributes.src;
        delete attributes.src;
      } else {
        attributes['data-loading'] = 'loading';
        attributes['onload'] = "this.removeAttribute('data-loading');";
      }
    }
    this.loadElement('script', attributes, text, callback);
  };

  Context.prototype.loadStylesheet = function(attributes, text, callback) {
    var tag;
    if (typeof text === 'function') {
      callback = text;
      text = null;
    }
    if (typeof attributes === 'string') {
      attributes = {
        href: attributes
      };
    }
    if (attributes.href) {
      attributes.href = this.resolve(attributes.href);
      if (soma.config.inlineStylesheets && attributes.href in soma.files) {
        tag = 'style';
        text = soma.files[attributes.href];
        attributes['data-href'] = attributes.href;
        delete attributes.href;
      } else {
        attributes.rel || (attributes.rel = 'stylesheet');
        attributes.type || (attributes.type = 'text/css');
        attributes.charset || (attributes.charset = 'utf8');
      }
    }
    tag = attributes.href ? 'link' : 'style';
    this.loadElement(tag, attributes, text, callback);
  };

  Context.prototype.loadImage = function(attributes, callback) {
    if (typeof attributes === 'string') {
      attributes = {
        src: attributes
      };
    }
    attributes.src = this.resolve(attributes.src);
    attributes['data-loading'] = 'loading';
    attributes['onload'] = "this.removeAttribute('data-loading');";
    this.loadElement('img', attributes, null, callback);
  };

  Context.prototype.loadData = function(options, callback) {
    var subcontext;
    if (typeof options === 'string') {
      options = {
        url: options
      };
    }
    options.url = this.resolve(options.url);
    subcontext = this.createSubcontext({
      body: options.data,
      begin: function() {
        return soma.router.run(options.url, this);
      },
      send: function(statusCode, body) {
        if (typeof statusCode !== 'number') {
          body = statusCode;
          statusCode = 200;
        }
        if (statusCode !== 200) {
          if (options.error) {
            options.error(statusCode, body, options);
          }
          return callback(statusCode, body);
        }
        if (options.success) {
          options.success(body);
        }
        return callback(null, body);
      },
      sendError: function(err, body) {
        if (err) {
          console.log(err.stack);
        }
        return this.send(500, body);
      }
    });
    subcontext.begin();
  };

  return Context;

})(soma.Context);
