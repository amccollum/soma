// Generated by CoffeeScript 1.3.3
var Element, combineChunks, escapeXML, jar, multipart, querystring, soma, url,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

jar = require('jar');

querystring = require('querystring');

url = require('url');

multipart = require('./lib/multipart');

soma = require('..');

escapeXML = function(s) {
  return s.toString().replace(/&(?!\w+;)|["<>]/g, function(s) {
    switch (s) {
      case '&':
        return '&amp;';
      case '"':
        return '&#34;';
      case '<':
        return '&lt;';
      case '>':
        return '&gt;';
      default:
        return s;
    }
  });
};

combineChunks = function(chunks) {
  var chunk, result, size, _i, _j, _len, _len1;
  size = 0;
  for (_i = 0, _len = chunks.length; _i < _len; _i++) {
    chunk = chunks[_i];
    size += chunk.length;
  }
  result = new Buffer(size);
  size = 0;
  for (_j = 0, _len1 = chunks.length; _j < _len1; _j++) {
    chunk = chunks[_j];
    chunk.copy(result, size, 0);
    size += chunk.length;
  }
  return result;
};

Element = (function() {

  Element.prototype.isVoid = function() {
    return this.tag in {
      area: true,
      base: true,
      br: true,
      col: true,
      hr: true,
      img: true,
      input: true,
      link: true,
      meta: true,
      param: true,
      command: true,
      keygen: true,
      source: true
    };
  };

  function Element(tag, attributes, text) {
    this.tag = tag;
    this.attributes = attributes != null ? attributes : {};
    this.text = text != null ? text : '';
  }

  Element.prototype.headerKey = function() {
    switch (this.tag) {
      case 'meta':
        if ('charset' in this.attributes) {
          return 'meta-charset';
        } else if ('name' in this.attributes) {
          return "meta-name-" + this.attributes.name;
        } else if ('http-equiv' in this.attributes) {
          return "meta-http-" + this.attributes['http-equiv'];
        }
        break;
      case 'title':
        return 'title';
      case 'link':
        return "link-" + this.attributes.rel + "-" + this.attributes.href;
      case 'script':
        if (this.attributes.src) {
          return "script-" + this.attributes.src;
        } else {
          return "script-" + this.text;
        }
        break;
      case 'style':
        return "style-" + this.attributes['data-href'];
    }
  };

  Element.prototype.html = function() {
    return this.text;
  };

  Element.prototype.outerHTML = function() {
    var html, name, value, _ref;
    html = "<" + this.tag;
    _ref = this.attributes;
    for (name in _ref) {
      value = _ref[name];
      html += " " + name + "=\"" + (escapeXML(value)) + "\"";
    }
    html += !this.text && this.isVoid() ? ' />' : ">" + this.text + "</" + this.tag + ">";
    return html;
  };

  Element.prototype.toString = Element.prototype.outerHTML;

  return Element;

})();

soma.Chunk = (function(_super) {

  __extends(Chunk, _super);

  function Chunk() {
    return Chunk.__super__.constructor.apply(this, arguments);
  }

  Chunk.prototype.load = function() {
    Chunk.__super__.load.apply(this, arguments);
    if (this._src) {
      return this.loadScript(this._src);
    }
  };

  return Chunk;

})(soma.Chunk);

soma.ClientContext = (function(_super) {

  __extends(ClientContext, _super);

  ClientContext.prototype.inlineScripts = false;

  ClientContext.prototype.inlineStylesheets = false;

  function ClientContext(request, response, scripts) {
    var attributes, key, script, urlParsed, _i, _len;
    this.request = request;
    this.response = response;
    urlParsed = url.parse(this.request.url, true);
    for (key in urlParsed) {
      this[key] = urlParsed[key];
    }
    this.cookies = new jar.Jar(this.request, this.response, ['$ecret']);
    this.head = {};
    this.addHeadElement(new Element('title'));
    this.addHeadElement(new Element('meta', {
      charset: 'utf-8'
    }));
    for (_i = 0, _len = scripts.length; _i < _len; _i++) {
      script = scripts[_i];
      attributes = {
        src: script,
        type: 'text/javascript',
        charset: 'utf8',
        onload: "this.removeAttribute('data-loading');",
        'data-loading': 'loading'
      };
      this.addHeadElement(new Element('script', attributes));
    }
  }

  ClientContext.prototype.addHeadElement = function(el) {
    if (el.headerKey()) {
      this.head[el.headerKey()] = el;
    }
  };

  ClientContext.prototype.addManifest = function(src) {
    return this.manifest = "manifest=" + src;
  };

  ClientContext.prototype.begin = function() {
    var contentType;
    contentType = this.request.headers['content-type'];
    if (contentType) {
      contentType = contentType.split(/;/)[0];
    }
    switch (contentType) {
      case void 0:
        this.route({});
        break;
      case 'application/x-www-form-urlencoded':
        this._readUrlEncoded();
        break;
      case 'application/json':
        this._readJSON();
        break;
      case 'application/octet-stream':
        this._readBinary();
        break;
      case 'multipart/form-data':
        this._readFormData();
    }
  };

  ClientContext.prototype.route = function(data) {
    var result, results, _i, _len;
    this.data = data;
    results = soma.router.run(this.path, this);
    if (!results.length) {
      results = soma.router.run(null, this);
    }
    if (!results.length) {
      this.send(404);
    } else {
      for (_i = 0, _len = results.length; _i < _len; _i++) {
        result = results[_i];
        if (result instanceof soma.Chunk) {
          this.send(result);
        }
      }
    }
  };

  ClientContext.prototype.send = function(statusCode, body, contentType) {
    var contentLength,
      _this = this;
    if (typeof statusCode !== 'number') {
      contentType = body;
      body = statusCode;
      statusCode = 200;
    }
    body || (body = '');
    if (body instanceof soma.Chunk) {
      if (this.chunks) {
        throw new Error('Cannot send multiple chunks');
      }
      this.chunks = [body];
      while (this.chunks[0].meta) {
        this.chunks.unshift(this.chunks[0].meta());
      }
      this.chunks[0].on('complete', function() {
        var key, value;
        _this.chunks[0].emit('render');
        return _this.send("<!doctype html>\n<html " + (_this.manifest || '') + ">\n<head>\n    " + (((function() {
          var _ref, _results;
          _ref = this.head;
          _results = [];
          for (key in _ref) {
            value = _ref[key];
            _results.push(value);
          }
          return _results;
        }).call(_this)).join('\n    ')) + "\n\n    <script type='text/javascript'>\n        soma.tree = " + (JSON.stringify(soma.tree)) + ";\n    </script>\n</head>\n<body>\n    " + _this.chunks[0].html + "\n</body>\n</html>");
      });
      this.chunks[0].load(this);
      return;
    }
    if (body instanceof Buffer) {
      contentType || (contentType = 'application/octet-stream');
      contentLength = body.length;
    } else {
      if (typeof body === 'object') {
        body = JSON.stringify(body);
        contentType || (contentType = 'application/json');
      } else {
        contentType || (contentType = 'text/html');
      }
      contentLength = Buffer.byteLength(body);
    }
    if (!this.cookies.get('_csrf', {
      raw: true
    })) {
      this.cookies.set('_csrf', Math.random().toString().substr(2), {
        raw: true
      });
    }
    this.response.statusCode = statusCode;
    this.response.setHeader('Content-Type', contentType);
    this.response.setHeader('Content-Length', contentLength);
    this.cookies.setHeaders();
    this.response.end(body);
  };

  ClientContext.prototype.sendError = function(err, body) {
    if (err) {
      console.log(err.stack);
    }
    return this.send(500, body);
  };

  ClientContext.prototype.go = function(path) {
    var chunk, _i, _len, _ref;
    if (this.chunks) {
      _ref = this.chunks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        chunk = _ref[_i];
        chunk.emit('halt');
      }
      this.chunks = null;
    }
    this.response.statusCode = 303;
    this.response.setHeader('Location', path);
    this.cookies.setHeaders();
    this.response.end();
    return false;
  };

  ClientContext.prototype._readJSON = function() {
    var chunks,
      _this = this;
    chunks = [];
    this.request.on('data', function(chunk) {
      return chunks.push(chunk);
    });
    this.request.on('end', function() {
      if (_this.request.method === 'GET' || _this.request.headers['x-csrf-token'] === _this.cookies.get('_csrf', {
        raw: true
      })) {
        return _this.route(JSON.parse(chunks.join('') || 'null'));
      } else {
        return _this.sendError(null, 'Bad/missing _csrf token.');
      }
    });
  };

  ClientContext.prototype._readBinary = function() {
    var chunks, data,
      _this = this;
    chunks = [];
    data = {};
    this.request.on('data', function(chunk) {
      return chunks.push(chunk);
    });
    return this.request.on('end', function() {
      if (_this.request.headers['x-csrf-token'] === _this.cookies.get('_csrf', {
        raw: true
      })) {
        data[_this.request.headers['x-file-name']] = combineChunks(chunks);
        return _this.route(data);
      } else {
        return _this.sendError(null, 'Bad/missing _csrf token.');
      }
    });
  };

  ClientContext.prototype._readUrlEncoded = function() {
    var chunks,
      _this = this;
    chunks = [];
    this.request.on('data', function(chunk) {
      return chunks.push(chunk);
    });
    this.request.on('end', function() {
      var data;
      data = querystring.parse(chunks.join(''));
      if (_this.request.method === 'GET' || data._csrf === _this.cookies.get('_csrf', {
        raw: true
      })) {
        delete data._csrf;
        return _this.route(data);
      } else {
        return _this.sendError(null, 'Bad/missing _csrf token.');
      }
    });
  };

  ClientContext.prototype._readFormData = function() {
    var chunks, data, formData,
      _this = this;
    chunks = [];
    data = {};
    formData = new multipart.formData(this.request);
    formData.on('stream', function(stream) {
      chunks = [];
      stream.on('data', function(chunk) {
        return chunks.push(chunk);
      });
      return stream.on('end', function() {
        return data[stream.name] = combineChunks(chunks);
      });
    });
    formData.on('end', function() {
      if (data._csrf === _this.cookies.get('_csrf', {
        raw: true
      })) {
        delete data._csrf;
        return _this.route(data);
      } else {
        return _this.sendError(null, 'Bad/missing _csrf token.');
      }
    });
    formData.begin();
  };

  ClientContext.prototype.setTitle = function(title) {
    return this.loadElement('title', {}, title);
  };

  ClientContext.prototype.setIcon = function(attributes) {
    if (typeof attributes === 'string') {
      attributes = {
        href: attributes
      };
    }
    attributes.rel || (attributes.rel = 'icon');
    attributes.type || (attributes.type = 'image/png');
    return this.loadElement('link', attributes);
  };

  ClientContext.prototype.setMetaHeader = function(attributes, content) {
    if (typeof attributes === 'string') {
      attributes = {
        'http-equiv': attributes,
        content: content
      };
    }
    return this.loadElement('meta', attributes);
  };

  ClientContext.prototype.setMeta = function(attributes, content) {
    if (typeof attributes === 'string') {
      attributes = {
        name: attributes,
        content: content
      };
    }
    return this.loadElement('meta', attributes);
  };

  ClientContext.prototype.setManifest = function(src) {
    return this.addManifest(src);
  };

  ClientContext.prototype.loadElement = function(tag, attributes, text, callback) {
    var el;
    el = new Element(tag, attributes, text);
    this.addHeadElement(el);
    if (callback) {
      callback(null, el);
    }
    return el;
  };

  ClientContext.prototype.loadScript = function(attributes, callback) {
    var text;
    if (typeof attributes === 'string') {
      attributes = {
        src: attributes
      };
    }
    attributes.type = 'text/javascript';
    attributes.charset = 'utf8';
    if (this.inlineScripts) {
      text = soma.files[attributes.src];
      attributes['data-src'] = attributes.src;
      delete attributes.src;
    } else {
      attributes['data-loading'] = 'loading';
      attributes['onload'] = "this.removeAttribute('data-loading');";
    }
    this.loadElement('script', attributes, text, callback);
  };

  ClientContext.prototype.loadStylesheet = function(attributes, callback) {
    var tag, text;
    if (typeof attributes === 'string') {
      attributes = {
        href: attributes
      };
    }
    if (this.inlineStylesheets) {
      tag = 'style';
      text = soma.files[attributes.href];
      attributes['data-href'] = attributes.href;
      delete attributes.href;
    } else {
      attributes.rel = 'stylesheet';
    }
    attributes.type = 'text/css';
    attributes.charset = 'utf8';
    this.loadElement('link', attributes, text, callback);
  };

  ClientContext.prototype.loadTemplate = function(name) {
    var attributes;
    url = this.lookup(name);
    attributes = {
      'data-src': url,
      type: 'text/plain'
    };
    this.loadElement('script', attributes, soma.files[url], function(err, el) {});
  };

  ClientContext.prototype.loadImage = function(attributes, callback) {
    if (typeof attributes === 'string') {
      attributes = {
        src: attributes
      };
    }
    attributes['data-loading'] = 'loading';
    attributes['onload'] = "this.removeAttribute('data-loading');";
    this.loadElement('img', attributes, null, callback);
  };

  ClientContext.prototype.loadData = function(options, callback) {
    var context;
    context = new ((function() {

      function _Class() {
        this.error = __bind(this.error, this);

        this.success = __bind(this.success, this);

      }

      _Class.prototype.begin = function() {
        return soma.router.run(options.url, this);
      };

      _Class.prototype.send = function(statusCode, body) {
        if (typeof statusCode !== 'number') {
          body = statusCode;
          statusCode = 200;
        }
        if (statusCode !== 200) {
          return this.error(statusCode, body);
        }
        if (typeof body !== 'object') {
          throw new Error('Internal contexts can only send JSON.');
        }
        return this.success(body);
      };

      _Class.prototype.sendError = function(err, body) {
        if (err) {
          console.log(err.stack);
        }
        return this.send(500, body);
      };

      _Class.prototype.success = function(data) {
        if (options.success) {
          options.success(data);
        }
        return callback(null, data);
      };

      _Class.prototype.error = function(status, response) {
        if (options.error) {
          options.error(status, response, options);
        }
        return callback(status, response, options);
      };

      _Class.prototype = context;

      _Class.prototype.constructor = _Class;

      return _Class;

    })());
    context.begin();
  };

  ClientContext.prototype.loadChunk = function(name, data, callback) {
    var chunk, fn;
    chunk = new Chunk;
    url = this.lookup(name + '.js');
    fn = new Function('context', 'soma', 'data', soma.files[url]);
    fn.apply(chunk, this, soma, data);
    chunk.on('complete', function() {
      return callback(null, chunk);
    });
  };

  return ClientContext;

})(soma.Context);
