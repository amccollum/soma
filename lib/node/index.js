// Generated by CoffeeScript 1.3.1
var Element, escapeXML, jar, querystring, soma, upload, url,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

jar = require('jar');

querystring = require('querystring');

url = require('url');

upload = require('./lib/upload');

soma = require('..');

escapeXML = function(s) {
  return s.toString().replace(/&(?!\w+;)|["<>]/g, function(s) {
    switch (s) {
      case '&':
        return '&amp;';
      case '"':
        return '&#34;';
      case '<':
        return '&lt;';
      case '>':
        return '&gt;';
      default:
        return s;
    }
  });
};

Element = (function() {

  Element.name = 'Element';

  Element.prototype.isVoid = function() {
    return this.tag in {
      area: true,
      base: true,
      br: true,
      col: true,
      hr: true,
      img: true,
      input: true,
      link: true,
      meta: true,
      param: true,
      command: true,
      keygen: true,
      source: true
    };
  };

  function Element(tag, attributes, text) {
    this.tag = tag;
    this.attributes = attributes;
    this.text = text;
    if (tag === 'img' || tag === 'script') {
      this.url = attributes.src || attributes['data-src'];
    } else {
      this.url = attributes.href || attributes['data-href'];
    }
  }

  Element.prototype.toString = function() {
    var html, name, value, _ref;
    html = "<" + this.tag;
    _ref = this.attributes;
    for (name in _ref) {
      value = _ref[name];
      html += " " + name + "=\"" + (escapeXML(value)) + "\"";
    }
    html += !this.text && this.isVoid() ? ' />' : ">" + (this.text || '') + "</" + this.tag + ">";
    return html;
  };

  return Element;

})();

soma.Chunk = (function(_super) {

  __extends(Chunk, _super);

  Chunk.name = 'Chunk';

  function Chunk() {
    return Chunk.__super__.constructor.apply(this, arguments);
  }

  Chunk.prototype.loadScript = function(attributes, callback) {
    var text;
    if (typeof attributes === 'string') {
      attributes = {
        src: attributes
      };
    }
    attributes.type = 'text/javascript';
    attributes.charset = 'utf8';
    if (this.context.inlineScripts) {
      text = soma.files[attributes.src];
      attributes['data-src'] = attributes.src;
      delete attributes.src;
    }
    this.context.addHeadElement(new Element('script', attributes, text));
    if (callback) {
      callback();
    }
  };

  Chunk.prototype.loadStylesheet = function(attributes) {
    var tag, text;
    if (typeof attributes === 'string') {
      attributes = {
        href: attributes
      };
    }
    if (this.context.inlineStylesheets) {
      tag = 'style';
      text = soma.files[attributes.href];
      attributes['data-href'] = attributes.href;
      delete attributes.href;
    }
    attributes.type = 'text/css';
    attributes.rel = 'stylesheet';
    attributes.charset = 'utf8';
    this.context.addHeadElement(new Element('link', attributes, text));
  };

  Chunk.prototype.loadTemplate = function(attributes) {
    var text;
    if (typeof attributes === 'string') {
      attributes = {
        src: attributes
      };
    }
    if (this.context.inlineTemplates) {
      text = soma.files[attributes.src];
      attributes['data-src'] = attributes.src;
      delete attributes.src;
    }
    attributes.type = 'text/plain';
    attributes.charset = 'utf8';
    this.context.addHeadElement(new Element('script', attributes, text));
    return text;
  };

  Chunk.prototype.loadImage = function(attributes) {
    if (typeof attributes === 'string') {
      attributes = {
        src: attributes
      };
    }
    return new Element('img', attributes);
  };

  Chunk.prototype.loadData = function(options) {
    var context, done, result, _error, _success,
      _this = this;
    result = {};
    _success = options.success;
    _error = options.error;
    done = this.wait();
    options.success = function(data) {
      var key, _i, _len;
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        key = data[_i];
        result[key] = data[key];
      }
      if (_success) {
        _success(data);
      }
      return done();
    };
    options.error = function(status, response) {
      if (_error) {
        _error(status, response, options);
      } else {
        _this.emit('error', 'requireData', status, response, options);
      }
      return done();
    };
    context = new soma.InternalContext(this.context, options);
    context.begin();
    return result;
  };

  return Chunk;

})(soma.Chunk);

soma.ClientContext = (function(_super) {

  __extends(ClientContext, _super);

  ClientContext.name = 'ClientContext';

  ClientContext.prototype.inlineTemplates = true;

  ClientContext.prototype.inlineScripts = false;

  ClientContext.prototype.inlineStylesheets = false;

  function ClientContext(request, response) {
    var key, urlParsed;
    this.request = request;
    this.response = response;
    urlParsed = url.parse(this.request.url, true);
    for (key in urlParsed) {
      this[key] = urlParsed[key];
    }
    this.jar = new jar.Jar(this.request, this.response);
    this.head = [];
    this.seen = {};
  }

  ClientContext.prototype.addHeadElement = function(element) {
    var _ref;
    if (_ref = element.url, __indexOf.call(this.seen, _ref) >= 0) {
      return;
    }
    this.seen[element.url] = true;
    this.head.push(element);
  };

  ClientContext.prototype.begin = function() {
    switch (this.request.headers['content-type']) {
      case void 0:
      case 'application/x-www-form-urlencoded':
        this._readUrlEncoded();
        break;
      case 'application/json':
        this._readJSON();
        break;
      case 'application/octet-stream':
      case 'multipart/form-data':
        this._readFiles();
    }
  };

  ClientContext.prototype.route = function(data) {
    var result, results, _i, _len;
    this.data = data;
    results = soma.router.run(this.path, this);
    for (_i = 0, _len = results.length; _i < _len; _i++) {
      result = results[_i];
      if (result instanceof soma.Chunk) {
        this.chunk = result;
        this.chunk.load(this);
      } else if (result instanceof soma.Page) {
        this.page = result;
      }
    }
    this.render();
  };

  ClientContext.prototype.render = function() {
    var _this = this;
    if (this.chunk) {
      this.page || (this.page = new soma.pages.Default);
      if (this.chunk.html) {
        return this.page.render(this.chunk);
      } else {
        return this.chunk.on('complete', function() {
          return _this.page.render(_this.chunk);
        });
      }
    } else {
      return this.send(404);
    }
  };

  ClientContext.prototype.send = function(statusCode, body, contentType) {
    if (typeof statusCode !== 'number') {
      contentType = body;
      body = statusCode;
      statusCode = 200;
    }
    body || (body = '');
    if (body instanceof Buffer) {
      contentType || (contentType = 'application/octet-stream');
    } else {
      if (typeof body === 'object') {
        body = JSON.stringify(body);
        contentType || (contentType = 'application/json');
      } else {
        contentType || (contentType = 'text/html');
      }
    }
    this.response.statusCode = statusCode;
    this.response.setHeader('Content-Type', contentType);
    this.response.setHeader('Content-Length', Buffer.byteLength(body));
    this.response.end(body);
  };

  ClientContext.prototype.sendError = function(err, body) {
    if (err) {
      console.log(err.stack);
    }
    return this.send(500, body);
  };

  ClientContext.prototype.redirect = function(path) {
    this.response.statusCode = 303;
    this.response.setHeader('Location', path);
    this.response.end();
  };

  ClientContext.prototype._readJSON = function() {
    var chunks,
      _this = this;
    chunks = [];
    this.request.on('data', function(chunk) {
      return chunks.push(chunk);
    });
    this.request.on('end', function() {
      return _this.route(JSON.parse(chunks.join("")));
    });
  };

  ClientContext.prototype._readUrlEncoded = function() {
    var chunks,
      _this = this;
    chunks = [];
    this.request.on('data', function(chunk) {
      return chunks.push(chunk);
    });
    this.request.on('end', function() {
      return _this.route(querystring.parse(chunks.join("")));
    });
  };

  ClientContext.prototype._readFiles = function() {
    var uploadRequest,
      _this = this;
    uploadRequest = new upload.UploadRequest(this.request);
    uploadRequest.once('file', function(file) {
      var chunks;
      chunks = [];
      file.on('data', function(chunk) {
        return chunks.push(chunk);
      });
      return file.on('end', function() {
        return _this.route(util.combineChunks(chunks));
      });
    });
    uploadRequest.begin();
  };

  return ClientContext;

})(soma.Context);

soma.InternalContext = (function(_super) {

  __extends(InternalContext, _super);

  InternalContext.name = 'InternalContext';

  function InternalContext(parent, options) {
    this.parent = parent;
    this.options = options;
    this.jar = this.parent.jar;
  }

  InternalContext.prototype.begin = function() {
    return soma.router.run(this.options.url, this);
  };

  InternalContext.prototype.send = function(statusCode, body) {
    if (typeof statusCode !== 'number') {
      body = statusCode;
      statusCode = 200;
    }
    if (statusCode !== 200) {
      return this.options.error(statusCode, body);
    }
    if (typeof body !== 'object') {
      throw new Error('Internal contexts can only send JSON.');
    }
    return this.options.success(body);
  };

  InternalContext.prototype.redirect = function(path) {
    return this.parent.redirect(path);
  };

  return InternalContext;

})(soma.Context);
